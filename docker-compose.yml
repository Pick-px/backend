version: '3.8'

services:
  # NestJS 애플리케이션
  app:
    build:
      context: .
      target: development
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    depends_on:
      - redis
      - postgres

  worker:
    build:
      context: .
      target: development
    command: npm run start:worker
    depends_on:
      - redis
      - postgres
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}

  # ==========================================
  # Redis 통합
  # ==========================================
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru

  # ==========================================
  # 3개 Redis 분리 (환경변수로 관리 가능)
  # ==========================================
  #
  # # Redis (ElastiCache 대신 로컬 개발용)
  # redis:
  #   image: redis:7-alpine
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
  #
  # # 픽셀 전용 Redis (오토 스케일링 대응)
  # redis-pixel:
  #   image: redis:7-alpine
  #   ports:
  #     - "6380:6379"
  #   volumes:
  #     - redis_pixel_data:/data
  #   command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru
  #
  # # 채팅 전용 Redis (오토 스케일링 대응)
  # redis-chat:
  #   image: redis:7-alpine
  #   ports:
  #     - "6381:6379"
  #   volumes:
  #     - redis_chat_data:/data
  #   command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru

  # PostgreSQL (RDS 대신 로컬 개발용, 환경변수 사용)
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/create_db.sql/create_db.sql:/docker-entrypoint-initdb.d/1_create_db.sql
      - ./sql/schema.sql/schema.sql:/docker-entrypoint-initdb.d/2_schema.sql

volumes:
  redis_data:
  # redis_pixel_data:  # 3개 버전용
  # redis_chat_data:   # 3개 버전용
  postgres_data: