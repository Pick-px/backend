version: '3.8'

services:
  # NestJS 애플리케이션
  app:
    build:
      context: .
      target: production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    restart: unless-stopped
    networks:
      - app-network

  # BullMQ Worker (큐 처리용)
  worker:
    build:
      context: .
      target: production
    command: npm run start:worker
    environment:
      - NODE_ENV=production
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge


# [제거]
# 로컬 Redis 서비스 - ElastiCache 사용으로 대체
# 로컬 PostgreSQL 서비스 - RDS 사용으로 대체
# 개발용 볼륨 마운트 - 배포 환경에서는 불필요
# 개발용 depends_on - 외부 서비스이므로 제거
# [추가]
# production 빌드 타겟 - 최적화된 프로덕션 이미지 사용
# PostgreSQL 환경변수 - RDS 연결을 위한 모든 환경변수 추가
# restart: unless-stopped - 컨테이너 자동 재시작 정책
# app-network - 컨테이너 간 통신을 위한 네트워크
# [환경변수 구성]
# REDIS_HOST - ElastiCache 엔드포인트
# REDIS_PORT - ElastiCache 포트 (보통 6379)
# POSTGRES_HOST - RDS 엔드포인트
# POSTGRES_PORT - RDS 포트 (보통 5432)
# POSTGRES_USER - RDS 사용자명
# POSTGRES_PASSWORD - RDS 비밀번호
# POSTGRES_DB - RDS 데이터베이스명