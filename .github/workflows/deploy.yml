name: Deploy NestJS to EKS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  EKS_CLUSTER_NAME: nestjs-cluster
  ECR_REPOSITORY: nestjs-app

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set deployment environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "namespace=nestjs-app-staging" >> $GITHUB_OUTPUT
            echo "image_tag=pr-${{ github.event.number }}-${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "deployment_suffix=-staging" >> $GITHUB_OUTPUT
          else
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "namespace=nestjs-app" >> $GITHUB_OUTPUT
            echo "image_tag=${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "deployment_suffix=" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS Configuration
        run: |
          echo "🔍 AWS 설정 확인..."
          aws sts get-caller-identity
          aws eks describe-cluster --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }} --query 'cluster.status'

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
          kubectl cluster-info
          kubectl get nodes

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Verify ECR Repository
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} || {
            echo "ECR 리포지토리 생성 중..."
            aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}
          }

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.env.outputs.image_tag }}
        run: |
          echo "🏗️ Docker 이미지 빌드 및 푸시..."

          # 멀티스테이지 빌드로 최적화된 이미지 생성
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG

          # latest 태그도 업데이트 (프로덕션만)
          if [[ "${{ steps.env.outputs.environment }}" == "production" ]]; then
            docker tag $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
            docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
          fi

      - name: Deploy to EKS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.env.outputs.image_tag }}
          NAMESPACE: ${{ steps.env.outputs.namespace }}
          ENVIRONMENT: ${{ steps.env.outputs.environment }}
          DEPLOYMENT_SUFFIX: ${{ steps.env.outputs.deployment_suffix }}
        run: |
          echo "🚀 EKS 배포 시작... (환경: $ENVIRONMENT, 네임스페이스: $NAMESPACE)"

          # Create namespace
          if [[ "$ENVIRONMENT" == "staging" ]]; then
            echo "📁 스테이징 네임스페이스 생성..."
            kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
            
            # TTL 라벨 추가 (24시간 후 정리)
            TTL_TIMESTAMP=$(date -d '+24 hours' +%s)
            kubectl label namespace $NAMESPACE \
              staging.cleanup/ttl-unix=$TTL_TIMESTAMP \
              staging.cleanup/pr-number=${{ github.event.number }} \
              staging.cleanup/created-date=$(date +%Y-%m-%d) \
              --overwrite
          else
            echo "📁 프로덕션 네임스페이스 생성..."
            kubectl apply -f k8s/namespace.yaml
          fi

          # Create secrets
          echo "🔐 시크릿 생성/업데이트..."
          kubectl create secret generic app-secrets \
            --from-literal=jwt-secret="${{ secrets.JWT_SECRET }}" \
            --from-literal=database-url="${{ secrets.DATABASE_URL }}" \
            --from-literal=postgres-host="pick-px-postgres-nossl.czcs262ucewo.ap-northeast-2.rds.amazonaws.com" \
            --from-literal=postgres-port="5432" \
            --from-literal=postgres-user="pick_px" \
            --from-literal=postgres-password="${{ secrets.POSTGRES_PASSWORD }}" \
            --from-literal=postgres-db="nestjs_db" \
            --from-literal=postgres-ssl="false" \
            --from-literal=redis-url="${{ secrets.REDIS_URL }}" \
            --from-literal=redis-host="pick-px-redis-cluster-001.bu00mo.0001.apn2.cache.amazonaws.com" \
            --from-literal=redis-port="6379" \
            --from-literal=redis-tls="false" \
            --from-literal=google-client-id="${{ secrets.GOOGLE_CLIENT_ID }}" \
            --from-literal=google-client-secret="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
            --from-literal=google-redirect-uri="${{ secrets.GOOGLE_REDIRECT_URI }}" \
            --from-literal=aws-access-key-id="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            --from-literal=aws-secret-access-key="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            --from-literal=aws-region="${{ secrets.AWS_REGION }}" \
            --from-literal=aws-s3-bucket="${{ secrets.AWS_S3_BUCKET }}" \
            --namespace=$NAMESPACE \
            --dry-run=client -o yaml | kubectl apply -f -

          # Prepare deployment files
          echo "🔄 배포 파일 준비..."
          cp -r k8s k8s-temp

          # Update image tags
          sed -i "s|863518449560.dkr.ecr.ap-northeast-2.amazonaws.com/nestjs-app:latest|$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG|g" k8s-temp/deployment.yaml
          sed -i "s|863518449560.dkr.ecr.ap-northeast-2.amazonaws.com/nestjs-app:latest|$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG|g" k8s-temp/worker-deployment.yaml

          # Update for staging environment
          if [[ "$ENVIRONMENT" == "staging" ]]; then
            # Update namespace
            sed -i "s|namespace: nestjs-app|namespace: $NAMESPACE|g" k8s-temp/*.yaml
            
            # Update resource names
            sed -i "s|name: nestjs-app|name: nestjs-app$DEPLOYMENT_SUFFIX|g" k8s-temp/deployment.yaml
            sed -i "s|app: nestjs-app|app: nestjs-app$DEPLOYMENT_SUFFIX|g" k8s-temp/deployment.yaml
            sed -i "s|component: api|component: api$DEPLOYMENT_SUFFIX|g" k8s-temp/deployment.yaml
            
            sed -i "s|name: nestjs-worker|name: nestjs-worker$DEPLOYMENT_SUFFIX|g" k8s-temp/worker-deployment.yaml
            sed -i "s|app: nestjs-worker|app: nestjs-worker$DEPLOYMENT_SUFFIX|g" k8s-temp/worker-deployment.yaml
            sed -i "s|component: worker|component: worker$DEPLOYMENT_SUFFIX|g" k8s-temp/worker-deployment.yaml
            
            sed -i "s|name: nestjs-service|name: nestjs-service$DEPLOYMENT_SUFFIX|g" k8s-temp/service.yaml
            sed -i "s|app: nestjs-app|app: nestjs-app$DEPLOYMENT_SUFFIX|g" k8s-temp/service.yaml
            sed -i "s|component: api|component: api$DEPLOYMENT_SUFFIX|g" k8s-temp/service.yaml
            
            sed -i "s|name: nestjs-hpa|name: nestjs-hpa$DEPLOYMENT_SUFFIX|g" k8s-temp/hpa.yaml
            sed -i "s|name: nestjs-app|name: nestjs-app$DEPLOYMENT_SUFFIX|g" k8s-temp/hpa.yaml
            
            # Skip ingress for staging
            rm -f k8s-temp/ingress.yaml
          fi

          # Deploy resources
          echo "📦 리소스 배포..."
          kubectl apply -f k8s-temp/deployment.yaml
          kubectl apply -f k8s-temp/worker-deployment.yaml
          kubectl apply -f k8s-temp/service.yaml
          kubectl apply -f k8s-temp/hpa.yaml

          # Deploy ingress only for production
          if [[ "$ENVIRONMENT" == "production" ]]; then
            echo "🌐 Ingress 배포..."
            kubectl apply -f k8s-temp/ingress.yaml
          fi

          echo "✅ 리소스 배포 완료"

      - name: Monitor deployment
        env:
          NAMESPACE: ${{ steps.env.outputs.namespace }}
          DEPLOYMENT_SUFFIX: ${{ steps.env.outputs.deployment_suffix }}
        run: |
          echo "🔍 배포 상태 모니터링..."

          # Wait for deployments to be ready
          echo "⏳ API 서버 배포 대기..."
          kubectl rollout status deployment/nestjs-app$DEPLOYMENT_SUFFIX -n $NAMESPACE --timeout=600s

          echo "⏳ Worker 배포 대기..."
          kubectl rollout status deployment/nestjs-worker$DEPLOYMENT_SUFFIX -n $NAMESPACE --timeout=600s

          # Show final status
          echo "📊 최종 상태:"
          kubectl get pods -n $NAMESPACE -o wide
          kubectl get svc -n $NAMESPACE
          kubectl get hpa -n $NAMESPACE

          if [[ "${{ steps.env.outputs.environment }}" == "production" ]]; then
            kubectl get ingress -n $NAMESPACE
          fi

      - name: Health check
        if: steps.env.outputs.environment == 'production'
        run: |
          echo "🏥 헬스체크 수행..."

          # Get service endpoint
          SERVICE_IP=$(kubectl get svc nestjs-service -n nestjs-app -o jsonpath='{.spec.clusterIP}')

          # Port forward for health check
          kubectl port-forward svc/nestjs-service 8080:80 -n nestjs-app &
          PF_PID=$!

          sleep 10

          # Health check
          if curl -f http://localhost:8080/health; then
            echo "✅ 헬스체크 성공"
          else
            echo "❌ 헬스체크 실패"
            exit 1
          fi

          kill $PF_PID

      - name: Cleanup on failure
        if: failure()
        env:
          NAMESPACE: ${{ steps.env.outputs.namespace }}
        run: |
          echo "🧹 실패 시 정리 작업..."
          kubectl get events -n $NAMESPACE --sort-by='.lastTimestamp' | tail -20
          kubectl describe pods -n $NAMESPACE
          kubectl logs -l app=nestjs-app -n $NAMESPACE --tail=50 || echo "앱 로그 없음"
          kubectl logs -l app=nestjs-worker -n $NAMESPACE --tail=50 || echo "워커 로그 없음"
