name: Deploy to EKS

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: nestjs-app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ap-northeast-2 --name nestjs-cluster
    
    - name: Install AWS Load Balancer Controller (if not exists)
      run: |
        # Check if AWS Load Balancer Controller exists
        if ! kubectl get deployment -n kube-system aws-load-balancer-controller > /dev/null 2>&1; then
          echo "Installing AWS Load Balancer Controller..."
          
          # Download IAM policy
          curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.7.2/docs/install/iam_policy.json
          
          # Create IAM policy (ignore if exists)
          aws iam create-policy \
            --policy-name AWSLoadBalancerControllerIAMPolicy \
            --policy-document file://iam_policy.json || true
          
          # Create service account
          eksctl create iamserviceaccount \
            --cluster=nestjs-cluster \
            --namespace=kube-system \
            --name=aws-load-balancer-controller \
            --role-name AmazonEKSLoadBalancerControllerRole \
            --attach-policy-arn=arn:aws:iam::863518449560:policy/AWSLoadBalancerControllerIAMPolicy \
            --approve || true
          
          # Install AWS Load Balancer Controller
          kubectl apply \
            --validate=false \
            -f https://github.com/jetstack/cert-manager/releases/download/v1.13.0/cert-manager.yaml
          
          # Wait for cert-manager
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/instance=cert-manager -n cert-manager --timeout=300s
          
          # Download and apply AWS Load Balancer Controller
          curl -Lo v2_7_2_full.yaml https://github.com/kubernetes-sigs/aws-load-balancer-controller/releases/download/v2.7.2/v2_7_2_full.yaml
          sed -i.bak -e 's|your-cluster-name|nestjs-cluster|' v2_7_2_full.yaml
          kubectl apply -f v2_7_2_full.yaml
          
          # Wait for controller to be ready
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=aws-load-balancer-controller -n kube-system --timeout=300s
        else
          echo "AWS Load Balancer Controller already exists"
        fi
    
    - name: Deploy to EKS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: nestjs-app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Create namespace
        kubectl apply -f k8s/namespace.yaml
        
        # Create or update secrets
        kubectl create secret generic app-secrets \
          --from-literal=database-url="${{ secrets.DATABASE_URL }}" \
          --from-literal=redis-url="${{ secrets.REDIS_URL }}" \
          --namespace=nestjs-app \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # Update deployment image
        sed -i "s|863518449560.dkr.ecr.ap-northeast-2.amazonaws.com/nestjs-app:latest|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" k8s/deployment.yaml
        
        # Deploy application
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/hpa.yaml
        kubectl apply -f k8s/ingress.yaml
        
        # Check deployment status
        kubectl rollout status deployment/nestjs-app -n nestjs-app
        
        # Show ingress info
        echo "Waiting for ALB to be ready..."
        sleep 60
        kubectl get ingress -n nestjs-app
